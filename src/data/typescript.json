[
    {
        "title": "概览",
        "points": [
            {
                "item": "安装",
                "content": "npm i -g typescript"
            },
            {
                "item": "编译",
                "content": "tsc 文件名.ts"
            },
            {
                "item": "tsc参数",
                "content": "--help|--module|--target: ECMA版本|--declaration: 声明文件|--removeComments|--out|--sourcemap: 映射源代码与编译代码位置|--watch|--module nolmplicitAny: 隐式Any报错"
            },
            {
                "item": "运行",
                "content": "node 文件名.js或ts-node 文件名.ts"
            }
        ]
    },
    {
        "title": "基础",
        "points": [
            {
                "item": "分句",
                "content": ";"
            },
            {
                "item": "注释",
                "content": "单行//, 多行/**/"
            }
        ]
    },
    {
        "title": "类型",
        "points": [
            {
                "item": "任意",
                "content": "any"
            },
            {
                "item": "双精度64位浮点",
                "content": "number, 0b二进制, 0o八进制, 0x十六进制"
            },
            {
                "item": "文本",
                "content": "string, 普通用单双引号, 反引号用于模板字符串或多行文本"
            },
            {
                "item": "布尔",
                "content": "boolean, 只有true和false"
            },
            {
                "item": "数组",
                "content": "Array<类型>或类型[]"
            },
            {
                "item": "元组",
                "content": "[类型1, 类型2], 规定死固定位置类型"
            },
            {
                "item": "枚举",
                "content": "enum 枚举名{枚举值}, 键必须字符串"
            },
            {
                "item": "空值",
                "content": "void无返回值, null对象缺失, undefined初始化未定义"
            },
            {
                "item": "never",
                "content": "从不会出现的值"
            }
        ]
    },
    {
        "title": "变量",
        "points": [
            {
                "item": "用let, 而不用var",
                "content": "let有块级作用域, var会提升变量"
            },
            {
                "item": "类型断言",
                "content": "<类型>变量|变量 as 类型, 属于编译时语法, 不提供类型转换"
            },
            {
                "item": "静态变量",
                "content": "static"
            }
        ]
    },
    {
        "title": "运算符",
        "points": [
            {
                "item": "计算",
                "content": "%求模, ===恒等于, ||或, &&和"
            },
            {
                "item": "位和",
                "content": "&, 二进制位都为1值为1, 否则0"
            },
            {
                "item": "位或",
                "content": "|, 二进制位只要一个为1, 就为1"
            },
            {
                "item": "取反",
                "content": "~"
            },
            {
                "item": "异或",
                "content": "^, 二进制位不同为1, 否则0"
            },
            {
                "item": "左移",
                "content": "<<, 二进制位高位丢弃, 低位补零"
            },
            {
                "item": "有符号右移",
                "content": ">>"
            },
            {
                "item": "无符号右移",
                "content": ">>>"
            },
            {
                "item": "三目运算符",
                "content": "条件 ? 真 : 假"
            },
            {
                "item": "类型判断",
                "content": "typeof"
            },
            {
                "item": "子类判断",
                "content": "instanceof"
            }
        ]
    },
    {
        "title": "条件",
        "points": [
            {
                "item": "if",
                "content": "if(条件){}else if(条件){}else{}"
            },
            {
                "item": "switch",
                "content": "switch(表达式){case 结果: 执行语句; break; default: 默认;}"
            }
        ]
    },
    {
        "title": "循环",
        "points": [
            {
                "item": "for",
                "content": "for(初始化循环变量; 条件; 变化){}"
            },
            {
                "item": "for in",
                "content": "for(let 元素 in list){}"
            },
            {
                "item": "for of",
                "content": "for(let 序号 of list){}"
            },
            {
                "item": "forEach",
                "content": "list.forEach((值, 序号, 数组) => {}), 在itertion中无法返回"
            },
            {
                "item": "every和some",
                "content": "一个是判断是否每个满足, 一个是判断是否有个满足, list.every((值, 序号, 数组) => {return true})"
            },
            {
                "item": "while",
                "content": "while(){}"
            },
            {
                "item": "do while",
                "content": "do{}while()"
            },
            {
                "item": "continue和break",
                "content": "一个是跳过当前循环, 进入下一循环, 一个是终止跳出"
            }
        ]
    },
    {
        "title": "函数",
        "points": [
            {
                "item": "定义",
                "content": "function(){}"
            },
            {
                "item": "可选",
                "content": "?"
            },
            {
                "item": "默认",
                "content": "function(默认参数=默认值){}"
            },
            {
                "item": "rest参数",
                "content": "..., 剩余参数"
            },
            {
                "item": "匿名函数",
                "content": "let 变量名 = function(){}"
            },
            {
                "item": "自调用",
                "content": "(function(){})()"
            },
            {
                "item": "构造函数",
                "content": "new Function('参数', '表达式')"
            },
            {
                "item": "Lambda函数",
                "content": "() => {表达式}, 又叫箭头函数"
            },
            {
                "item": "函数重载",
                "content": "虽然名字相同, 参数列表不同, 重载之后新旧都可以调用"
            },
            {
                "item": "泛型函数",
                "content": "function<T>(arg: T): T{return arg;}"
            }
        ]
    },
    {
        "title": "Number",
        "points": [
            {
                "item": "创建",
                "content": "new Number()"
            },
            {
                "item": "MAX_VALUE",
                "content": "最大的数, 大于即是Infinity"
            },
            {
                "item": "MIN_VALUE",
                "content": "最接近于0的正数, -MIN_VALUE是最大的负数"
            },
            {
                "item": "NaN",
                "content": "非数字"
            },
            {
                "item": "NEGATIVE_INFINITY",
                "content": "负无穷大"
            },
            {
                "item": "POSITIVE_INFINITY",
                "content": "正无穷大"
            },
            {
                "item": "toExponential",
                "content": "科学计数法"
            },
            {
                "item": "toFixed",
                "content": "转字符串, 可指定小数点位数"
            },
            {
                "item": "toLocaleString",
                "content": "转字符串"
            },
            {
                "item": "toPrecision",
                "content": "格式化为指定长度"
            },
            {
                "item": "toString",
                "content": "转字符串, 可指定进制"
            },
            {
                "item": "valueOf",
                "content": "返回对象原始数字值"
            }
        ]
    },
    {
        "title": "String",
        "points": [
            {
                "item": "length",
                "content": "长度"
            },
            {
                "item": "charAt和charCodeAt",
                "content": "一个返回指定位置的字符, 一个返回指定位置的Unicode编码"
            },
            {
                "item": "concat",
                "content": "同+"
            },
            {
                "item": "indexOf和lastIndexOf",
                "content": "首次出现的位置和最后出现的位置"
            },
            {
                "item": "localeCompare",
                "content": "比较字符串"
            },
            {
                "item": "正则",
                "content": "match: 正则匹配|replace: 正则替换|search: 正则查找"
            },
            {
                "item": "slice和split",
                "content": "一个是切片, 一个是分割成子元素数组"
            },
            {
                "item": "substr和substring",
                "content": "一个是提取指定个数的字符, 一个是提取两个索引号之间字符"
            },
            {
                "item": "大小写",
                "content": "toLocaleLowerCase|toLocaleUpperCase|toLowerCase|toUpperCase"
            }
        ]
    },
    {
        "title": "Array",
        "points": [
            {
                "item": "map",
                "content": "一次处理每个元素, 返回数组"
            },
            {
                "item": "pop和unshift",
                "content": "一个是删除末尾, 一个是删除首位"
            },
            {
                "item": "push和shift",
                "content": "一个是添加末尾, 一个是添加首位"
            },
            {
                "item": "splice",
                "content": "添加或删除"
            },
            {
                "item": "sort和reverse",
                "content": "排序或反转"
            },
            {
                "item": "reduce和reduceRight(函数)",
                "content": "计算为一个值, 一个从左往右, 一个从右往左"
            },
            {
                "item": "filter(函数)",
                "content": "返回符合条件元素数组"
            },
            {
                "item": "concat",
                "content": "合并多数组"
            }
        ]
    },
    {
        "title": "接口",
        "points": [
            {
                "item": "定义接口",
                "content": "interface 接口名{键值对}"
            },
            {
                "item": "数组接口",
                "content": "interface 接口名{[index: number]: string}"
            },
            {
                "item": "继承",
                "content": "extends, 接口相互继承"
            }
        ]
    },
    {
        "title": "类",
        "points": [
            {
                "item": "定义类",
                "content": "class 类名{}"
            },
            {
                "item": "字段",
                "content": "类中声明变量, 键值对"
            },
            {
                "item": "构造函数",
                "content": "constructor(形参){}"
            },
            {
                "item": "重写",
                "content": "super"
            },
            {
                "item": "访问控制修饰符",
                "content": "public: 公有|protected: 类系访问|private: 自身访问"
            },
            {
                "item": "implements和extends",
                "content": "一个是类实现接口, 一个是类间继承"
            },
            {
                "item": "prototype",
                "content": "添加属性或方法"
            }
        ]
    },
    {
        "title": "命名空间",
        "points": [
            {
                "item": "定义命名空间",
                "content": "namespace 命名空间名{export 暴露参量}"
            }
        ]
    },
    {
        "title": "声明文件",
        "points": [
            {
                "item": "文件名",
                "content": "后缀名.d.ts"
            },
            {
                "item": "声明",
                "content": "declare module 模块名{}或declare let jQuery: (selector: string) => any"
            },
            {
                "item": "引入声明文件",
                "content": "/// <reference path = '文件.d.ts'>"
            }
        ]
    }
]